
function copy_data(){
	mkdir(["yong","yong/skin","yong/mb","yong/locale","yong/gnome-shell"]);
	
	cp('../im/yong-tool.sh','yong/');
	exec("chmod a+x yong/yong-tool.sh");
	cp('../im/yong.ini','yong/');
	cp('./im/yong.xml','yong/');
	cp('../im/skin', 'yong/');
	
	exec("msgfmt -c ../im/gtk-im/zh_CN.po -o yong/locale/zh_CN.mo");
	
	cp('../data/README.txt','yong/');
	cp('../data/yong.chm', 'yong/');
	cp('../data/bihua.bin','yong/');
	cp('../data/normal.txt','yong/');
	cp('../data/mb/wbx.txt','yong/mb/');
	cp('../data/mb/wbx.ini','yong/mb/');
	cp('../data/mb/wbpy.ini','yong/mb/');
	cp('../data/mb/erbi.txt','yong/mb/');
	cp('../data/mb/zhengma.txt','yong/mb/');
	cp('../data/mb/english.txt','yong/mb/');
	cp('../data/mb/pinyin.ini','yong/mb/');
	cp('../data/mb/sp.ini','yong/mb/');
	cp('../data/mb/pinyin.txt','yong/mb/');
	cp('../data/mb/pypre.bin','yong/mb/');
	cp('../data/mb/yong.txt','yong/mb/');
	cp('../data/entry','yong/');
}

function copy_build(build){
	env("BUILD","=",build);
	mkdir(["yong/$(BUILD)","yong/$(BUILD)/gtk-im"]);
	cp('../llib/$(BUILD)/libl.so','yong/$(BUILD)');
	cp('../im/$(BUILD)-gtk3/yong','yong/$(BUILD)/yong-gtk3');
	cp('../config/$(BUILD)-gtk3/yong-config','yong/$(BUILD)/yong-config-gtk3');
	cp('../config/$(BUILD)-gtk4/yong-config','yong/$(BUILD)/yong-config-gtk4');
	cp('../vim/$(BUILD)/yong-vim','yong/$(BUILD)');
	cp('../mb/$(BUILD)/libmb.so','yong/$(BUILD)');
	cp('../gbk/$(BUILD)/libgbk.so','yong/$(BUILD)');
	cp('../cloud/$(BUILD)/libcloud.so','yong/$(BUILD)');
	cp('../im/gtk-im/$(BUILD)-gtk2/im-yong.so','yong/$(BUILD)/gtk-im/im-yong-gtk2.so');
	cp('../im/gtk-im/$(BUILD)-gtk3/im-yong.so','yong/$(BUILD)/gtk-im/im-yong-gtk3.so');
	cp('../im/gtk4-im/$(BUILD)-gtk4/libimyong.so','yong/$(BUILD)/gtk-im/libimyong-gtk4.so');
	
	exec("strip yong/$(BUILD)/gtk-im/*.so");
	exec("strip yong/$(BUILD)/*.so");
	exec("strip yong/$(BUILD)/yong-gtk3");
	exec("strip yong/$(BUILD)/yong-config-gtk3");
	exec("strip yong/$(BUILD)/yong-config-gtk4");
	exec("strip yong/$(BUILD)/yong-vim");


}

function set_ver(){
	if(process.env.VER)
		var VER=process.env.VER;
	else
		var VER=shell("date +%Y%m%d");
	env("VER",":=",VER);
}

function deb(){
	if(!which('dpkg')){
		console.log("dpkg not found\n");
		return;
	}
	if(!which('fakeroot')){
		console.log("fakeroot not found\n");
		return;
	}
	var VER=process.env.VER || shell("date +%Y%m%d");
	mkdir(['deb','deb/opt','deb/DEBIAN']);
	cp('yong','deb/opt/');

	const control=
`Package: yong
Version: ${VER}
Architecture: all
Maintainer: dgod
Description: yong
`;
	fs.writeFileSync('deb/DEBIAN/control',control);

	const postinst=
`#!/bin/bash
cd /opt/yong
./yong-tool.sh --install\n
`;
	fs.writeFileSync('deb/DEBIAN/postinst',postinst,{mode:0o755});

		const prerm=
`#!/bin/bash
cd /opt/yong
./yong-tool.sh --uninstall
`;
	fs.writeFileSync('deb/DEBIAN/prerm',prerm,{mode:0o755});

	exec(`fakeroot dpkg -b deb yong-${VER}.deb`);
}

function rpm(){
	if(!which('rpmbuild')){
		console.log("rpmbuild not found\n");
		return;
	}
	var VER=process.env.VER || shell("date +%Y%m%d");
const spec=
`%define name		yong
%define version		${VER}
%define release		0

%define prefix		/opt

%global _binaries_in_noarch_packages_terminate_build 0
%define _source_payload w9.gzdio
%define _binary_payload w9.gzdio

Name:		%{name}
Version:	%{version}
Release:	%{release}
Summary:	Yong Input Method
Summary(zh_CN):	Yong输入法
Packager:	dgod <dgod.osa@gmail.com>
URL:		https://yong.dgod.net
Group:		User Interface/X
License:	DGOD
Source:		%{name}-%{version}.tar.gz
BuildRoot:	%{_builddir}/%{name}-%{version}-root
BuildArch:		noarch

%description
Yong Input Method, include yong(zrm), wubi, zhengma, erbi, english, gbk, pinyin, zhangma.

%description -l zh_CN
Yong输入法，包含永码(自然双拼)，五笔，郑码，二笔，英语，内码，拼音，张码。

%prep

%build

%install
mkdir -p \${RPM_BUILD_ROOT}/%{prefix}
cp -r ~/yong/install/yong \${RPM_BUILD_ROOT}/%{prefix}

%clean
[ \${RPM_BUILD_ROOT} != "/" ] && rm -rf \${RPM_BUILD_ROOT}

%files
%{prefix}/yong

%post
cd %{prefix}/yong
sh ./yong-tool.sh --install

%preun
if [ "$1" = "0" ] ; then
	cd %{prefix}/yong
	sh ./yong-tool.sh --uninstall
fi

%postun

%changelog
`;
	fs.writeFileSync('yong.spec',spec);
	exec('rpmbuild -bb yong.spec --target=noarch --define "_rpmdir `pwd`"');
	rm('yong.spec');
}

if(target=="copy"){
	copy_data();
	copy_build("l32");
	copy_build("l64");
}else if(target=="copy32"){
	copy_data();
	copy_build("l32");
}else if(target=="copy64"){
	copy_data();
	copy_build("l64");
}else if(target=="dist"){
	set_ver();
	exec("7za a yong-lin-$(VER).7z yong");	
}else if(target=="rpm"){
	rpm();
}else if(target=="deb"){
	deb();
}

