var SRCS=dir('.','*.c');
var DIRS=['l32','l64',

	];

function run(target){
	if(target=='w32') {
		env('CROSS_COMPILE=i686-w64-mingw32-');
		env('DLL=.dll');
		env('CFLAGS=-D_UNICODE -DUNICODE -DUSE_SYSTEM_ICONV');
		env('LDFLAGS=-static-libgcc');
		// env('LDFLAGS+=-Wl,--out-implib=w32/libl.a');
	}else if(target=='w64'){
		env('CROSS_COMPILE=x86_64-w64-mingw32-');
		env('DLL=.dll');
		env('CFLAGS=-D_UNICODE -DUNICODE -DUSE_SYSTEM_ICONV');
		env('LDFLAGS=-static-libgcc');
		// env('LDFLAGS+=-Wl,--out-implib=w64/libl.a');
	}else if(target=='l32'){
		env('CC=clang -m32');
		env('LDFLAGS=-Wl,--hash-style=sysv');
		env('DLL=.so');
		env('CFLAGS=-m32 -fpic');
		if(os.platform()=='linux')
			env('CFLAGS+=-D_GNU_SOURCE');
		env('LIBS=-lm');
	}else if(target=='l64'){
		env('CC=clang');
		env('LDFLAGS=-Wl,--hash-style=sysv');
		env('DLL=.so');
		env('CFLAGS=-fpic');
		if(os.platform()=='linux')
			env('CFLAGS+=-D_GNU_SOURCE');
		env('LIBS=-lm');
	}else if(target=='js'){
		env('LDFLAGS=-m32');
		env('CFLAGS=-m32');
		env('DLL=.so');
		env('CROSS_COMPILE=/home/dgod/git/emsdk/upstream/emscripten/');
		env('CC:=$(CROSS_COMPILE)emcc');
		env('AR:=$(CROSS_COMPILE)ar');
		env('LDFLAGS+=-shared -Wno-emcc');	
		env('CFLAGS+=-Wno-invalid-source-encoding');
		env('CFLAGS+=-sSUPPORT_LONGJMP=wasm');
		env('LDFLAGS+=-sSUPPORT_LONGJMP=wasm');
	} else {
		return;
	}
	env("CFLAGS+=-Wall -pipe -g -O2 -fno-plt -flto=auto -ffast-math");
	//env("CFLAGS+=-fanalyzer -Wno-analyzer-possible-null-dereference -Wno-analyzer-possible-null-argument -Wanalyzer-malloc-leak");
	if(target!='js'){
		if(!$('CC'))
			env('CC:=$(CROSS_COMPILE)gcc');
		env('AR:=$(CROSS_COMPILE)ar');
		env('STRIP:=$(CROSS_COMPILE)strip');
		env('DLLTOOL:=$(CROSS_COMPILE)dlltool');
		env('LDFLAGS+=-shared');	
	}
	if($('CC').includes('clang')){
		env('CFLAGS+=-Wno-invalid-source-encoding');
	}
	var OBJS=wildcard(SRCS,function(input){
		return target+'/'+input.replace(/\.c$/,'.o');
	});
	begin();
	cc(SRCS,OBJS);
	end(function(){
		ld(OBJS,target+'/'+'libl$(DLL)');
	});
}

function clean(targets){
	if(!targets){
		rmdir(DIRS,'*');
		return;
	}
	targets.forEach(e=>{
		if(!DIRS.includes(e)){
			console.log("invalid clean target");
			exit(-1);
		}
		rmdir(e,'*');
	});
}

if(target=="clean"){
	clean(target.targets);
} else if(!target || target=="all"){
	build(undefined,undefined,DIRS);
} else {
	run(target);
}
